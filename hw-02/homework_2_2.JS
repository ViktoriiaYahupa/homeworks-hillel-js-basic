undefined + 1;
/**
 * результат --> NaN
 *
 * Number(undefined) це NaN
 * NaN + 1 = NaN
 */

"true" == true;
/**
 * результат --> false
 *
 * Number("true") == Number(true)
 * Nan == 1
 * отримаємо false
 */

false == "false";
/**
 * результат --> false
 *
 * Number(false) == Number("false")
 * 0 == NaN
 * отримаємо false
 */

null == "";
/**
 * результат --> true
 *
 * Number(null) == Number("")
 * 0 == 0
 * == знак не строгого дорівнює (типи даних не порівнюються як при ===)
 * отримаємо true
 *
 *
 * (??? консоль виводить false ???)
 */

3 ** (9 / 3);
/**
 * результат --> 27
 *
 *  1) 9/3=3
 *  2) 3**3=27
 */

!!"false" == !!"true";
/**
 * результат --> true
 *
 * "...Перше ! — перетворює значення на булеве і повертає зворотне, а друге ! — інвертує його знову...."
 *
 *  !!"false" --> перше ! --> true --> false    друге ! --> true
 *  !!"true"  --> перше ! --> true --> false    друге ! --> true
 *
 *  true==true
 */

0 || ("0" && 1);
/**
 * результат --> 1
 *
 *      1) "0" && 1
 *          true && true
 *  Логічний оператор (І) && повертає перше хибне значення, а якщо всі правдиві то повертає останнє
 *
 *  отримаємо 1
 *
 *      2) 0 || 1
 *         false || true
 * Логічний оператор (АБО) || повертає перше правдиве значення
 *
 * отримаємо 1
 */

1 < 2 < 3;
/**
 * результат --> true
 */

"foo" + +(+"bar");
/**
 * результат --> "fooNaN"
 *
 * конкатенація і унарний плюс
 *
 * (+"bar") --> NaN
 * +NaN --> NaN
 * "foo"+ Nan --> "fooNaN"
 */

3 ** 2 / 3;
/**
 * результат --> 3
 *
 *      1) 3**2=9  (піднесення до степеню має вищий пріорітет)
 *      2) 9/3=3
 */

1 < 2 > 3(+null == false) < 1;
/**
 * результат --> false
 *
 *          1) (+null == false)
 *              0 == false
 *              false == false
 *              true
 *
 *          2) 3 * true
 *             3*1
 *             3
 *
 * отримаємо такий вираз  1 < 2 > 3 < 1
 */

(false && true) || true;
/**
 * результат --> true
 *
 *          1) (false && true) --> false
 *
 *          2) false || true --> true
 *
 */

false && (true || true);
/**
 * результат --> false
 *
 *          1) (true || true) --> true
 *
 *          2) false && true --> false
 */

(+null == false) < 1 ** 5;
/**
 * результат --> false
 *
 *          1) (+null == false)
 *              (0 == false)
 *              (false == false)
 *              отримаємо true
 *
 *          2) 1 ** 5 = 1
 *
 *          3) true < 1
 *              1 < 1
 *           отримаємо false
 *
 */
